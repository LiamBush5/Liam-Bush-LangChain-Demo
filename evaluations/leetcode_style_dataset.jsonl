{"inputs": {"problem": "Two Sum\nGiven an array of integers nums and an integer target, return the indices of the two numbers such that they add up to target. Assume exactly one solution and the same element cannot be used twice.", "function_name": "two_sum", "tests": [{"args": [[2, 7, 11, 15], 9], "expected": [0, 1]}, {"args": [[3, 2, 4], 6], "expected": [1, 2]}, {"args": [[3, 3], 6], "expected": [0, 1]}], "performance_test": null}, "outputs": {}}
{"inputs": {"problem": "Valid Palindrome\nGiven a string s, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.", "function_name": "is_palindrome", "tests": [{"args": ["A man, a plan, a canal: Panama"], "expected": true}, {"args": ["race a car"], "expected": false}, {"args": [""], "expected": true}], "performance_test": null}, "outputs": {}}
{"inputs": {"problem": "Fibonacci Number\nReturn the n\u2011th Fibonacci number. Optimize for efficiency (e.g., fib(50) should run quickly).", "function_name": "fib", "tests": [{"args": [5], "expected": 5}, {"args": [10], "expected": 55}, {"args": [20], "expected": 6765}], "performance_test": {"args": [35], "time_limit_sec": 0.1}}, "outputs": {}}
{"inputs": {"problem": "Valid Anagram\nGiven two strings s and t, return true if t is an anagram of s, and false otherwise. Ignore punctuation and spacing.", "function_name": "is_anagram", "tests": [{"args": ["anagram", "nagaram"], "expected": true}, {"args": ["rat", "car"], "expected": false}, {"args": ["Dormitory", "Dirty room!!"], "expected": true}], "performance_test": null}, "outputs": {}}
{"inputs": {"problem": "In\u2011Place Array Sort\nSort an integer array in ascending order in\u2011place (no extra array).", "function_name": "in_place_sort", "tests": [{"args": [[5, 2, 3, 1]], "expected": [1, 2, 3, 5]}, {"args": [[]], "expected": []}, {"args": [[1]], "expected": [1]}], "performance_test": null}, "outputs": {}}
{"inputs": {"problem": "Valid Parentheses\nGiven a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.", "function_name": "is_valid_parentheses", "tests": [{"args": ["()"], "expected": true}, {"args": ["()[]{}"], "expected": true}, {"args": ["(]"], "expected": false}], "performance_test": null}, "outputs": {}}
{"inputs": {"problem": "Merge Two Sorted Lists\nMerge two sorted lists and return it as a new sorted list.", "function_name": "merge_sorted", "tests": [{"args": [[1, 2, 4], [1, 3, 4]], "expected": [1, 1, 2, 3, 4, 4]}, {"args": [[], []], "expected": []}, {"args": [[], [0]], "expected": [0]}], "performance_test": null}, "outputs": {}}
{"inputs": {"problem": "Majority Element\nGiven an array nums, return the majority element (the element that appears more than \u230an/2\u230b times).", "function_name": "majority_element", "tests": [{"args": [[3, 2, 3]], "expected": 3}, {"args": [[2, 2, 1, 1, 1, 2, 2]], "expected": 2}, {"args": [[1]], "expected": 1}], "performance_test": null}, "outputs": {}}
{"inputs": {"problem": "Greatest Common Divisor\nReturn the greatest common divisor (GCD) of two positive integers.", "function_name": "gcd", "tests": [{"args": [54, 24], "expected": 6}, {"args": [48, 180], "expected": 12}, {"args": [7, 13], "expected": 1}], "performance_test": null}, "outputs": {}}
{"inputs": {"problem": "Length of Longest Substring Without Repeating Characters\nGiven a string s, return the length of the longest substring without repeating characters.", "function_name": "length_of_longest_substring", "tests": [{"args": ["abcabcbb"], "expected": 3}, {"args": ["bbbbb"], "expected": 1}, {"args": ["pwwkew"], "expected": 3}], "performance_test": null}, "outputs": {}}
